<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.OrderMapper">
    <insert id="makeOrder" parameterType="NewOrderDTO" useGeneratedKeys="true" keyProperty="order_id">
        INSERT INTO `delivery`.`order` (`User_ID`, `Store_name`)
        VALUES (#{user_ID}, #{store_name});
    </insert>

    <update id="judgeOrder" parameterType="Map">
        UPDATE `order`
        SET state = (${state})
        WHERE order_id = (${order_id}) AND Store_name = #{Store_name}
    </update>

    <update id="cancelOrder" parameterType="OrderDTO">
        UPDATE `order`
        SET state = 1
        WHERE order_id = (${order_id}) AND state = 0 AND User_ID = #{User_ID}
    </update>

    <update id="cancelOwnerOrder" parameterType="OrderDTO">
        UPDATE `order`
        SET state = 1
        WHERE order_id = (${order_id}) AND state = 0
    </update>

    <update id="acceptOwnerOrder" parameterType="OrderDTO">
        UPDATE `order`
        SET state = 2
        WHERE order_id = (${order_id}) AND state = 0
    </update>

    <update id="restockMenu" parameterType="OrderDTO">
        UPDATE menu
        SET stock = stock +1
        WHERE menu_name  IN
                (SELECT menu_name
                FROM ordered_menu
                WHERE order_id = ${order_id})
    </update>

    <update id="updatePriceSum" parameterType="Map">
        UPDATE `delivery`.`order` SET `priceSum` = ${priceSum} WHERE (`order_id` = ${order_id});
    </update>

    <select id="getOrderState" parameterType="int" resultType="int">
        SELECT state
        FROM `order`
        WHERE order_id = (${orderId});
    </select>

    <select id="getStoreOrderList" parameterType="String" resultType="OrderViewDTO">
        select `order`.order_id, User_ID, menu_name, option_name, pricesum, state, `ordered_menu`.ordered_menu_id
        from (`order` join ordered_menu on `order`.order_id = ordered_menu.order_id) left outer join ordered_option on ordered_menu.ordered_menu_id = ordered_option.ordered_menu_id
        where store_name like #{store_name}
    </select>

    <select id="getUserOrderList" parameterType="String" resultType="OrderViewDTO">
        select `order`.order_id, User_ID, menu_name, option_name, pricesum, state, `ordered_menu`.ordered_menu_id
        from (`order` join ordered_menu on `order`.order_id = ordered_menu.order_id) left outer join ordered_option on ordered_menu.ordered_menu_id = ordered_option.ordered_menu_id
        where `order`.User_ID = #{user_id}
    </select>

    <select id="getOrderFinishList" parameterType="String" resultType="OrderViewDTO">
        select `order`.order_id, User_ID, menu_name, option_name, pricesum, state
        from (`order` join ordered_menu on `order`.order_id = ordered_menu.order_id) left outer join ordered_option on ordered_menu.ordered_menu_id = ordered_option.ordered_menu_id
        where store_name like #{store_name} and state = 1 or state = 3
    </select>

    <select id="getMenuSales" parameterType="String" resultType="MenuSalesDTO">
        select menu_name, count(menu_name), sum(priceSum)
        from ordered_menu join `order` on `order`.order_id = ordered_menu.order_id
        where Store_name like #{store_name} and state = 3
        group by menu_name
    </select>

    <select id="getStoreSales" resultType="StoreSalesDTO">
        select Store_name as store_name, count(order_id) as order_count , sum(priceSum) as sales
        from `order`
        where state = 3
        group by Store_name
    </select>
</mapper>